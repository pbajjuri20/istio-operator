kind: DeploymentConfig
apiVersion: v1
metadata:
  name: launcher-backend
  namespace: {{ .Release.Namespace }}
  labels:
    app: fabric8-launcher
    chart: {{ template "launcher.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
  annotations:
    configmap.fabric8.io/update-on-change: "launcher,launcher-clusters"
spec:
  replicas: "{{ .Values.BACKEND_REPLICAS }}"
  selector:
    service: launcher-backend
  strategy:
    resources: {}
    rollingParams:
      intervalSeconds: 1
      maxSurge: 25%
      maxUnavailable: 25%
      timeoutSeconds: 600
      updatePeriodSeconds: 1
    type: Rolling
  template:
    metadata:
      labels:
        app: fabric8-launcher
        chart: {{ template "launcher.chart" . }}
        heritage: {{ .Release.Service }}
        release: {{ .Release.Name }}
        service: launcher-backend
    spec:
      containers:
      - env:
        - name: LAUNCHER_BOOSTER_CATALOG_REPOSITORY
          valueFrom:
            configMapKeyRef:
              name: launcher
              key: launcher.backend.catalog.git.repository
        - name: LAUNCHER_BOOSTER_CATALOG_REF
          valueFrom:
            configMapKeyRef:
              name: launcher
              key: launcher.backend.catalog.git.ref
        - name: LAUNCHER_BOOSTER_CATALOG_FILTER
          valueFrom:
            configMapKeyRef:
              name: launcher
              key: launcher.backend.catalog.filter
              optional: true
        - name: LAUNCHER_BACKEND_CATALOG_REINDEX_TOKEN
          valueFrom:
            configMapKeyRef:
              name: launcher
              key: launcher.backend.catalog.reindex.token
              optional: true
        - name: LAUNCHER_BACKEND_DOCUMENTATION_RELOAD_TOKEN
          valueFrom:
            configMapKeyRef:
              name: launcher
              key: launcher.backend.documentation.reload.token
              optional: true
        - name: LAUNCHER_MISSIONCONTROL_OPENSHIFT_API_URL
          valueFrom:
            configMapKeyRef:
              name: launcher
              key: launcher.missioncontrol.openshift.api.url
              optional: true
        - name: LAUNCHER_MISSIONCONTROL_OPENSHIFT_CONSOLE_URL
          valueFrom:
            configMapKeyRef:
              name: launcher
              key: launcher.missioncontrol.openshift.console.url
              optional: true
        - name: LAUNCHER_MISSIONCONTROL_OPENSHIFT_TOKEN
          valueFrom:
            secretKeyRef:
              name: launcher-backend-token
              key: token
              optional: true
        - name: LAUNCHER_MISSIONCONTROL_GITHUB_USERNAME
          valueFrom:
            configMapKeyRef:
              name: launcher
              key: launcher.missioncontrol.github.username
              optional: true
        - name: LAUNCHER_MISSIONCONTROL_GITHUB_TOKEN
          valueFrom:
            configMapKeyRef:
              name: launcher
              key: launcher.missioncontrol.github.token
              optional: true
        - name: LAUNCHER_KEYCLOAK_URL
          valueFrom:
            configMapKeyRef:
              name: launcher
              key: launcher.keycloak.url
        - name: LAUNCHER_KEYCLOAK_REALM
          valueFrom:
            configMapKeyRef:
              name: launcher
              key: launcher.keycloak.realm
        - name: LAUNCHER_TRACKER_SEGMENT_TOKEN
          valueFrom:
            configMapKeyRef:
              name: launcher
              key: launcher.tracker.segment.token
        - name: LAUNCHER_BACKEND_ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: launcher
              key: launcher.backend.environment
        - name: LAUNCHER_MISSIONCONTROL_OPENSHIFT_CLUSTERS_FILE
          value: /etc/fabric8-launcher/openshift-clusters.yaml
        - name: KEYCLOAK_SAAS_URL
          valueFrom:
            configMapKeyRef:
              name: launcher
              key: osio.keycloak.saas.url
        - name: OPENSHIFT_API_URL
          valueFrom:
            configMapKeyRef:
              name: launcher
              key: osio.openshift.api.url
        - name: WIT_URL
          valueFrom:
            configMapKeyRef:
              name: launcher
              key: osio.wit.url
              optional: true
        - name: AUTH_URL
          valueFrom:
            configMapKeyRef:
              name: launcher
              key: osio.auth.url
              optional: true
        - name: JENKINS_URL
          valueFrom:
            configMapKeyRef:
              name: launcher
              key: osio.jenkins.url
              optional: true
        - name: SENTRY_DSN
          valueFrom:
            configMapKeyRef:
              name: launcher
              key: osio.sentry.dsn
              optional: true
        image: {{ .Values.BACKEND_IMAGE }}:{{ .Values.BACKEND_IMAGE_TAG }}
        imagePullPolicy: Always
        name: launcher-backend
        ports:
        - containerPort: 8080
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        volumeMounts:
        - mountPath: /etc/fabric8-launcher/
          name: configmap-volume
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 20
          timeoutSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 20
          timeoutSeconds: 10
        resources:
          requests:
            cpu: {{ .Values.BACKEND_CPU_REQUEST }}
            memory: {{ .Values.BACKEND_MEMORY_REQUEST }}
          limits:
            cpu: {{ .Values.BACKEND_CPU_LIMIT }}
            memory: {{ .Values.BACKEND_MEMORY_LIMIT }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: configmap-volume
        configMap:
          name: launcher-clusters
  test: false
  triggers:
  - type: ConfigChange

---
kind: DeploymentConfig
apiVersion: v1
metadata:
  name: launcher-frontend
  namespace: {{ .Release.Namespace }}
  labels:
    app: fabric8-launcher
    chart: {{ template "launcher.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
  annotations:
    configmap.fabric8.io/update-on-change: "launcher"
spec:
  replicas: "{{ .Values.FRONTEND_REPLICAS }}"
  selector:
    service: launcher-frontend
  strategy:
    resources: {}
    rollingParams:
      intervalSeconds: 1
      maxSurge: 25%
      maxUnavailable: 25%
      timeoutSeconds: 600
      updatePeriodSeconds: 1
    type: Rolling
  template:
    metadata:
      labels:
        app: fabric8-launcher
        chart: {{ template "launcher.chart" . }}
        heritage: {{ .Release.Service }}
        release: {{ .Release.Name }}
        service: launcher-frontend
    spec:
      containers:
      - image: {{ .Values.FRONTEND_IMAGE }}:{{ .Values.FRONTEND_IMAGE_TAG }}
        imagePullPolicy: Always
        name: launcher-frontend
        ports:
        - containerPort: 8080
          protocol: TCP
        env:
        - name: LAUNCHER_BACKEND_URL
          valueFrom:
            configMapKeyRef:
              name: launcher
              key: launcher.backend.url
        - name: LAUNCHER_MISSIONCONTROL_URL
          valueFrom:
            configMapKeyRef:
              name: launcher
              key: launcher.missioncontrol.url
        - name: LAUNCHER_KEYCLOAK_URL
          valueFrom:
            configMapKeyRef:
              name: launcher
              key: launcher.keycloak.url
        - name: LAUNCHER_KEYCLOAK_REALM
          valueFrom:
            configMapKeyRef:
              name: launcher
              key: launcher.keycloak.realm
        - name: LAUNCHER_TRACKER_SEGMENT_TOKEN
          valueFrom:
            configMapKeyRef:
              name: launcher
              key: launcher.tracker.segment.token
        resources: {}
        terminationMessagePath: /dev/termination-log
        readinessProbe:
          httpGet:
            path: /launch/wizard
            port: 8080
          initialDelaySeconds: 15
          timeoutSeconds: 10
          periodSeconds: 20
        livenessProbe:
          httpGet:
            path: /launch/wizard
            port: 8080
          initialDelaySeconds: 30
          timeoutSeconds: 10
          periodSeconds: 20
        resources:
          requests:
            cpu: {{ .Values.FRONTEND_CPU_REQUEST }}
            memory: {{ .Values.FRONTEND_MEMORY_REQUEST }}
          limits:
            cpu: {{ .Values.FRONTEND_CPU_LIMIT }}
            memory: {{ .Values.FRONTEND_MEMORY_LIMIT }}
      restartPolicy: Always
      dnsPolicy: ClusterFirst
      securityContext: {}
      terminationGracePeriodSeconds: 30
  test: false
  triggers:
  - type: ConfigChange

---
apiVersion: v1
kind: DeploymentConfig
metadata:
  labels:
    app: fabric8-launcher
    chart: {{ template "launcher.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
    service: configmapcontroller
  name: configmapcontroller
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    service: configmapcontroller
  strategy:
    rollingParams:
      timeoutSeconds: 7200
    type: Rolling
  template:
    metadata:
      labels:
        app: fabric8-launcher
        chart: {{ template "launcher.chart" . }}
        heritage: {{ .Release.Service }}
        release: {{ .Release.Name }}
        service: configmapcontroller
    spec:
      containers:
      - env:
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: {{ .Values.CONTROLLER_IMAGE }}:{{ .Values.CONTROLLER_IMAGE_TAG }}
        name: configmapcontroller
      serviceAccountName: configmapcontroller
  triggers:
  - type: ConfigChange
